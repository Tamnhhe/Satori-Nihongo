package com.satori.platform.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SocialAccountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSocialAccountAllPropertiesEquals(SocialAccount expected, SocialAccount actual) {
        assertSocialAccountAutoGeneratedPropertiesEquals(expected, actual);
        assertSocialAccountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSocialAccountAllUpdatablePropertiesEquals(SocialAccount expected, SocialAccount actual) {
        assertSocialAccountUpdatableFieldsEquals(expected, actual);
        assertSocialAccountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSocialAccountAutoGeneratedPropertiesEquals(SocialAccount expected, SocialAccount actual) {
        assertThat(actual)
            .as("Verify SocialAccount auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSocialAccountUpdatableFieldsEquals(SocialAccount expected, SocialAccount actual) {
        assertThat(actual)
            .as("Verify SocialAccount relevant properties")
            .satisfies(a -> assertThat(a.getProvider()).as("check provider").isEqualTo(expected.getProvider()))
            .satisfies(a -> assertThat(a.getProviderUserId()).as("check providerUserId").isEqualTo(expected.getProviderUserId()))
            .satisfies(a -> assertThat(a.getAccessToken()).as("check accessToken").isEqualTo(expected.getAccessToken()))
            .satisfies(a -> assertThat(a.getRefreshToken()).as("check refreshToken").isEqualTo(expected.getRefreshToken()))
            .satisfies(a -> assertThat(a.getTokenExpiry()).as("check tokenExpiry").isEqualTo(expected.getTokenExpiry()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSocialAccountUpdatableRelationshipsEquals(SocialAccount expected, SocialAccount actual) {
        assertThat(actual)
            .as("Verify SocialAccount relationships")
            .satisfies(a -> assertThat(a.getUserProfile()).as("check userProfile").isEqualTo(expected.getUserProfile()));
    }
}
