package com.satori.platform.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StudentQuizAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentQuizAllPropertiesEquals(StudentQuiz expected, StudentQuiz actual) {
        assertStudentQuizAutoGeneratedPropertiesEquals(expected, actual);
        assertStudentQuizAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentQuizAllUpdatablePropertiesEquals(StudentQuiz expected, StudentQuiz actual) {
        assertStudentQuizUpdatableFieldsEquals(expected, actual);
        assertStudentQuizUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentQuizAutoGeneratedPropertiesEquals(StudentQuiz expected, StudentQuiz actual) {
        assertThat(actual)
            .as("Verify StudentQuiz auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentQuizUpdatableFieldsEquals(StudentQuiz expected, StudentQuiz actual) {
        assertThat(actual)
            .as("Verify StudentQuiz relevant properties")
            .satisfies(a -> assertThat(a.getStartTime()).as("check startTime").isEqualTo(expected.getStartTime()))
            .satisfies(a -> assertThat(a.getEndTime()).as("check endTime").isEqualTo(expected.getEndTime()))
            .satisfies(a -> assertThat(a.getScore()).as("check score").isEqualTo(expected.getScore()))
            .satisfies(a -> assertThat(a.getCompleted()).as("check completed").isEqualTo(expected.getCompleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentQuizUpdatableRelationshipsEquals(StudentQuiz expected, StudentQuiz actual) {
        assertThat(actual)
            .as("Verify StudentQuiz relationships")
            .satisfies(a -> assertThat(a.getQuiz()).as("check quiz").isEqualTo(expected.getQuiz()))
            .satisfies(a -> assertThat(a.getStudent()).as("check student").isEqualTo(expected.getStudent()));
    }
}
