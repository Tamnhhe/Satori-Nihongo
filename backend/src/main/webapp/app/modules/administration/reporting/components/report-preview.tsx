import React from 'react';
import { Translate } from 'react-jhipster';
import { Card, CardBody, CardTitle, Table, Badge } from 'reactstrap';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faChartBar, faTable, faInfoCircle } from '@fortawesome/free-solid-svg-icons';

import { IReportData, SectionType } from 'app/shared/model/reporting.model';

interface ReportPreviewProps {
  report: IReportData;
}

const ReportPreview: React.FC<ReportPreviewProps> = ({ report }) => {
  const getSectionIcon = (type: SectionType) => {
    switch (type) {
      case SectionType.CHARTS:
        return faChartBar;
      case SectionType.TABLES:
        return faTable;
      default:
        return faInfoCircle;
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString();
  };

  return (
    <div className="report-preview">
      {/* Report Header */}
      <Card className="mb-4">
        <CardBody>
          <div className="d-flex justify-content-between align-items-start">
            <div>
              <h3>{report.title}</h3>
              {report.description && <p className="text-muted">{report.description}</p>}
            </div>
            <Badge color="primary">{report.reportType}</Badge>
          </div>

          <div className="row mt-3">
            <div className="col-md-6">
              <small className="text-muted">
                <strong>Generated:</strong> {formatDate(report.generatedAt)}
              </small>
            </div>
            <div className="col-md-6">
              <small className="text-muted">
                <strong>Generated By:</strong> {report.generatedBy}
              </small>
            </div>
          </div>

          {report.metadata && (
            <div className="mt-3">
              <h6>Report Metadata</h6>
              <div className="row">
                {report.metadata.dateRange && (
                  <div className="col-md-4">
                    <small>
                      <strong>Date Range:</strong> {report.metadata.dateRange}
                    </small>
                  </div>
                )}
                {report.metadata.totalRecords && (
                  <div className="col-md-4">
                    <small>
                      <strong>Total Records:</strong> {report.metadata.totalRecords}
                    </small>
                  </div>
                )}
              </div>

              {report.metadata.appliedFilters && report.metadata.appliedFilters.length > 0 && (
                <div className="mt-2">
                  <small>
                    <strong>Applied Filters:</strong>
                  </small>
                  <div className="mt-1">
                    {report.metadata.appliedFilters.map((filter, index) => (
                      <Badge key={index} color="secondary" className="me-1">
                        {filter}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
        </CardBody>
      </Card>

      {/* Report Sections */}
      {report.sections &&
        report.sections.map((section, sectionIndex) => (
          <Card key={sectionIndex} className="mb-4">
            <CardBody>
              <CardTitle tag="h5" className="d-flex align-items-center">
                <FontAwesomeIcon icon={getSectionIcon(section.type)} className="me-2" />
                {section.title}
              </CardTitle>

              {section.description && <p className="text-muted">{section.description}</p>}

              {/* Charts */}
              {section.charts && section.charts.length > 0 && (
                <div className="mb-4">
                  <h6>Charts</h6>
                  {section.charts.map((chart, chartIndex) => (
                    <Card key={chartIndex} className="mb-3">
                      <CardBody>
                        <h6>{chart.title}</h6>
                        <div className="chart-placeholder bg-light p-4 text-center">
                          <FontAwesomeIcon icon={faChartBar} size="3x" className="text-muted" />
                          <p className="mt-2 text-muted">{chart.chartType.toUpperCase()} Chart</p>
                          <small className="text-muted">Chart preview not available in this view</small>
                        </div>
                      </CardBody>
                    </Card>
                  ))}
                </div>
              )}

              {/* Tables */}
              {section.tables && section.tables.length > 0 && (
                <div className="mb-4">
                  <h6>Data Tables</h6>
                  {section.tables.map((table, tableIndex) => (
                    <Card key={tableIndex} className="mb-3">
                      <CardBody>
                        <h6>{table.title}</h6>
                        {table.headers && table.rows && (
                          <div className="table-responsive">
                            <Table striped size="sm">
                              <thead>
                                <tr>
                                  {table.headers.map((header, headerIndex) => (
                                    <th key={headerIndex}>{header}</th>
                                  ))}
                                </tr>
                              </thead>
                              <tbody>
                                {table.rows.slice(0, 10).map((row, rowIndex) => (
                                  <tr key={rowIndex}>
                                    {row.map((cell, cellIndex) => (
                                      <td key={cellIndex}>{cell !== null && cell !== undefined ? cell.toString() : '-'}</td>
                                    ))}
                                  </tr>
                                ))}
                              </tbody>
                            </Table>
                            {table.rows.length > 10 && (
                              <small className="text-muted">Showing first 10 rows of {table.rows.length} total rows</small>
                            )}
                          </div>
                        )}
                      </CardBody>
                    </Card>
                  ))}
                </div>
              )}
            </CardBody>
          </Card>
        ))}

      {/* Report Summary */}
      {report.summary && Object.keys(report.summary).length > 0 && (
        <Card>
          <CardBody>
            <CardTitle tag="h5">
              <Translate contentKey="reporting.preview.summary">Report Summary</Translate>
            </CardTitle>
            <div className="row">
              {Object.entries(report.summary).map(([key, value]) => (
                <div key={key} className="col-md-4 mb-2">
                  <small>
                    <strong>{formatKey(key)}:</strong> {value?.toString()}
                  </small>
                </div>
              ))}
            </div>
          </CardBody>
        </Card>
      )}
    </div>
  );
};

const formatKey = (key: string) => {
  return key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
};

export default ReportPreview;
