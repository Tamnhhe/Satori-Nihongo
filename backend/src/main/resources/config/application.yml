# ===================================================================
# Spring Boot configuration.
#
# This configuration will be overridden by the Spring profile you use,
# for example application-dev.yml if you use the "dev" profile.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

---
# Conditionally disable springdoc on missing api-docs profile
spring:
  config:
    activate:
      on-profile: '!api-docs'
springdoc:
  api-docs:
    enabled: false
---
management:
  endpoints:
    web:
      base-path: /management
      exposure:
        include:
          - configprops
          - env
          - health
          - info
          - jhimetrics
          - jhiopenapigroups
          - logfile
          - loggers
          - prometheus
          - threaddump
          - caches
          - liquibase
  endpoint:
    health:
      show-details: when_authorized
      roles: 'ROLE_ADMIN'
      probes:
        enabled: true
      group:
        liveness:
          include: livenessState
        readiness:
          include: readinessState,db
    jhimetrics:
      enabled: true
  info:
    git:
      mode: full
    env:
      enabled: true
  health:
    mail:
      enabled: false # When using the MailService, configure an SMTP server and set this to true
  prometheus:
    metrics:
      export:
        enabled: true
        step: 60
  observations:
    key-values:
      application: ${spring.application.name}
  metrics:
    enable:
      http: true
      jvm: true
      logback: true
      process: true
      system: true
    distribution:
      percentiles-histogram:
        all: true
      percentiles:
        all: 0, 0.5, 0.75, 0.95, 0.99, 1.0
    data:
      repository:
        autotime:
          enabled: true
    tags:
      application: ${spring.application.name}

spring:
  application:
    name: onlineSatoriPlatform
  docker:
    compose:
      enabled: true
      lifecycle-management: start-only
      file: src/main/docker/services.yml
  profiles:
    # The commented value for `active` can be replaced with valid Spring profiles to load.
    # Otherwise, it will be filled in by maven when building the JAR file
    # Either way, it can be overridden by `--spring.profiles.active` value passed in the commandline or `-Dspring.profiles.active` set in `JAVA_OPTS`
    active: '@spring.profiles.active@'
    group:
      dev:
        - dev
        - api-docs
        # Uncomment to activate TLS for the dev profile
        #- tls
  jmx:
    enabled: false
  data:
    jpa:
      repositories:
        bootstrap-mode: deferred
  jpa:
    open-in-view: false
    properties:
      hibernate.jdbc.time_zone: UTC
      hibernate.timezone.default_storage: NORMALIZE
      hibernate.type.preferred_instant_jdbc_type: TIMESTAMP
      hibernate.id.new_generator_mappings: true
      hibernate.connection.provider_disables_autocommit: true
      hibernate.cache.use_second_level_cache: true
      hibernate.cache.use_query_cache: false
      hibernate.generate_statistics: false
      # modify batch size as necessary
      hibernate.jdbc.batch_size: 25
      hibernate.order_inserts: true
      hibernate.order_updates: true
      hibernate.query.fail_on_pagination_over_collection_fetch: true
      hibernate.query.in_clause_parameter_padding: true
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
  messages:
    basename: i18n/messages
  main:
    allow-bean-definition-overriding: true
  mvc:
    problemdetails:
      enabled: true
  security:
    oauth2:
      resourceserver:
        jwt:
          authority-prefix: ''
          authorities-claim-name: auth
  task:
    execution:
      thread-name-prefix: online-satori-platform-task-
      pool:
        core-size: 2
        max-size: 50
        queue-capacity: 10000
    scheduling:
      thread-name-prefix: online-satori-platform-scheduling-
      pool:
        size: 2
  thymeleaf:
    mode: HTML
  output:
    ansi:
      console-available: true

server:
  servlet:
    session:
      cookie:
        http-only: true

springdoc:
  show-actuator: true

# Properties to be exposed on the /info management endpoint
info:
  # Comma separated list of profiles that will trigger the ribbon to show
  display-ribbon-on-profiles: 'dev'

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  clientApp:
    name: 'onlineSatoriPlatformApp'
  # By default CORS is disabled. Uncomment to enable.
  # cors:
  #   allowed-origins: "http://localhost:8100,http://localhost:9000,http://localhost:8081,http://localhost"
  #   allowed-methods: "*"
  #   allowed-headers: "*"
  #   exposed-headers: "Authorization,Link,X-Total-Count,X-${jhipster.clientApp.name}-alert,X-${jhipster.clientApp.name}-error,X-${jhipster.clientApp.name}-params"
  #   allow-credentials: true
  #   max-age: 1800
  mail:
    from: onlineSatoriPlatform@localhost
  api-docs:
    default-include-pattern: /api/**
    management-include-pattern: /management/**
    title: Online Satori Platform API
    description: Online Satori Platform API documentation
    version: 0.0.1
    terms-of-service-url:
    contact-name:
    contact-url:
    contact-email:
    license: unlicensed
    license-url:
  security:
    content-security-policy: "default-src 'self'; frame-src 'self' data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://storage.googleapis.com; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:"

# jhipster-needle-add-application-yaml-document
---
# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

# application:

# ===================================================================
# AI Service Configuration
# ===================================================================
app:
  ai:
    service:
      url: ${AI_SERVICE_URL:}
      api-key: ${AI_SERVICE_API_KEY:}
      timeout: ${AI_SERVICE_TIMEOUT:30000}
      enabled: ${AI_SERVICE_ENABLED:false}
      model: ${AI_SERVICE_MODEL:gpt-3.5-turbo}
      max-tokens: ${AI_SERVICE_MAX_TOKENS:2000}
    spring-ai:
      enabled: ${SPRING_AI_ENABLED:true}
    practice-test:
      default-question-count: ${AI_PRACTICE_TEST_DEFAULT_QUESTIONS:10}
      max-question-count: ${AI_PRACTICE_TEST_MAX_QUESTIONS:50}
      fallback-enabled: ${AI_PRACTICE_TEST_FALLBACK_ENABLED:true}
  rag:
    enabled: ${RAG_ENABLED:false}
    vector-db:
      type: postgresql # postgresql or pinecone
      postgresql:
        url: ${RAG_POSTGRES_URL:jdbc:postgresql://localhost:5432/satori_vectors}
        username: ${RAG_POSTGRES_USERNAME:satori_user}
        password: ${RAG_POSTGRES_PASSWORD:satori_pass}
        table-name: ${RAG_POSTGRES_TABLE:content_embeddings}
      pinecone:
        url: ${RAG_PINECONE_URL:}
        api-key: ${RAG_PINECONE_API_KEY:}
        index-name: ${RAG_PINECONE_INDEX:satori-content}
    embedding:
      provider: gemini # gemini or openai
      gemini:
        api-key: ${GEMINI_API_KEY:}
        model: ${GEMINI_EMBEDDING_MODEL:text-embedding-004}
        dimensions: ${GEMINI_EMBEDDING_DIMENSIONS:768}
        base-url: ${GEMINI_BASE_URL:https://generativelanguage.googleapis.com}
      openai:
        api-key: ${OPENAI_API_KEY:}
        model: ${OPENAI_EMBEDDING_MODEL:text-embedding-ada-002}
        dimensions: ${OPENAI_EMBEDDING_DIMENSIONS:1536}
        base-url: ${OPENAI_BASE_URL:https://api.openai.com/v1}
    ingestion:
      enabled: ${RAG_INGESTION_ENABLED:false}
      cron: ${RAG_INGESTION_CRON:0 30 3 * * *}

spring:
  ai:
    # Use OpenAI-compatible API; default points to local Ollama
    model:
      chat: openai
    openai:
      api-key: ${OPENAI_API_KEY:dummy}
      base-url: ${OPENAI_BASE_URL:http://localhost:11434}
      chat:
        options:
          model: ${OLLAMA_CHAT_MODEL:llama3.1}
          temperature: ${OLLAMA_CHAT_TEMPERATURE:0.6}
      embedding:
        options:
          model: ${OLLAMA_EMBED_MODEL:nomic-embed-text}

  # ===================================================================
  # Application specific properties
  # ===================================================================
  oauth2:
    enabled: ${OAUTH2_ENABLED:true}
    redirect-base-url: ${OAUTH2_REDIRECT_BASE_URL:http://localhost:8080}
    encryption:
      key: ${OAUTH2_ENCRYPTION_KEY:}
    token:
      refresh-threshold-minutes: ${OAUTH2_TOKEN_REFRESH_THRESHOLD_MINUTES:5}
      default-expiry-hours: ${OAUTH2_TOKEN_DEFAULT_EXPIRY_HOURS:1}
      cleanup-days: ${OAUTH2_TOKEN_CLEANUP_DAYS:30}
    cleanup:
      enabled: ${OAUTH2_CLEANUP_ENABLED:true}
      unused-account-days: ${OAUTH2_CLEANUP_UNUSED_ACCOUNT_DAYS:30}
      batch-size: ${OAUTH2_CLEANUP_BATCH_SIZE:100}
    providers:
      google:
        enabled: ${GOOGLE_OAUTH2_ENABLED:true}
        client-id: ${GOOGLE_CLIENT_ID:}
        client-secret: ${GOOGLE_CLIENT_SECRET:}
        scope: openid,profile,email
        additional-parameters:
          access_type: offline
          prompt: consent
      facebook:
        enabled: ${FACEBOOK_OAUTH2_ENABLED:true}
        client-id: ${FACEBOOK_CLIENT_ID:}
        client-secret: ${FACEBOOK_CLIENT_SECRET:}
        scope: email,public_profile
      github:
        enabled: ${GITHUB_OAUTH2_ENABLED:true}
        client-id: ${GITHUB_CLIENT_ID:}
        client-secret: ${GITHUB_CLIENT_SECRET:}
        scope: user:email,read:user
  rate-limiting:
    default-requests-per-minute: 60
    auth-requests-per-minute: 5
    file-upload-requests-per-minute: 10
    api-requests-per-minute: 100
    quiz-submission-requests-per-minute: 2
    notification-requests-per-minute: 20
    ban-duration-minutes: 15
    max-failed-attempts: 5
  file-storage:
    path: uploads
    max-file-size: 50MB
  security:
    audit-log:
      enabled: true
      retention-days: 90
    input-validation:
      enabled: true
      sanitize-html: true
    rate-limiting:
      enabled: true
