package com.satori.platform.service;

import com.satori.platform.service.dto.ReportConfigurationDTO;
import com.satori.platform.service.dto.ReportDataDTO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

@Service
public class ReportDeliveryService {

    private final Logger log = LoggerFactory.getLogger(ReportDeliveryService.class);

    @Autowired
    private JavaMailSender mailSender;

    /**
     * Deliver report to specified recipients via email
     */
    public void deliverReport(ReportDataDTO report, byte[] exportedReport,
            ReportConfigurationDTO.ReportFormat format, List<String> recipients) {
        log.debug("Delivering report {} to {} recipients", report.getReportId(), recipients.size());

        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

            // Set recipients
            helper.setTo(recipients.toArray(new String[0]));

            // Set subject
            String subject = String.format("Scheduled Report: %s - %s",
                    report.getTitle(),
                    report.getGeneratedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")));
            helper.setSubject(subject);

            // Set email body
            String emailBody = createEmailBody(report);
            helper.setText(emailBody, true);

            // Attach report file
            String filename = generateFilename(report, format);
            String contentType = getContentType(format);

            ByteArrayResource attachment = new ByteArrayResource(exportedReport);
            helper.addAttachment(filename, attachment, contentType);

            // Send email
            mailSender.send(message);

            log.info("Report '{}' delivered successfully to {} recipients",
                    report.getTitle(), recipients.size());

        } catch (MessagingException e) {
            log.error("Failed to deliver report '{}': {}", report.getTitle(), e.getMessage(), e);
            throw new RuntimeException("Failed to deliver report via email", e);
        }
    }

    /**
     * Send report delivery notification
     */
    public void sendDeliveryNotification(String reportName, List<String> recipients,
            boolean success, String errorMessage) {
        log.debug("Sending delivery notification for report: {}", reportName);

        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, false, "UTF-8");

            // Send to system administrators (you might want to configure this)
            helper.setTo("admin@satori-platform.com");

            String subject = String.format("Report Delivery %s: %s",
                    success ? "Success" : "Failed", reportName);
            helper.setSubject(subject);

            String body = createDeliveryNotificationBody(reportName, recipients, success, errorMessage);
            helper.setText(body, true);

            mailSender.send(message);

        } catch (MessagingException e) {
            log.error("Failed to send delivery notification: {}", e.getMessage(), e);
        }
    }

    private String createEmailBody(ReportDataDTO report) {
        StringBuilder body = new StringBuilder();

        body.append("<html><body>");
        body.append("<h2>").append(report.getTitle()).append("</h2>");
        body.append("<p><strong>Description:</strong> ").append(report.getDescription()).append("</p>");
        body.append("<p><strong>Generated:</strong> ")
                .append(report.getGeneratedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")))
                .append("</p>");
        body.append("<p><strong>Generated By:</strong> ").append(report.getGeneratedBy()).append("</p>");

        if (report.getMetadata() != null) {
            body.append("<h3>Report Details</h3>");
            body.append("<ul>");
            body.append("<li><strong>Date Range:</strong> ").append(report.getMetadata().getDateRange())
                    .append("</li>");
            body.append("<li><strong>Total Records:</strong> ").append(report.getMetadata().getTotalRecords())
                    .append("</li>");

            if (report.getMetadata().getAppliedFilters() != null
                    && !report.getMetadata().getAppliedFilters().isEmpty()) {
                body.append("<li><strong>Applied Filters:</strong>");
                body.append("<ul>");
                for (String filter : report.getMetadata().getAppliedFilters()) {
                    body.append("<li>").append(filter).append("</li>");
                }
                body.append("</ul></li>");
            }
            body.append("</ul>");
        }

        if (report.getSummary() != null && !report.getSummary().isEmpty()) {
            body.append("<h3>Summary</h3>");
            body.append("<ul>");
            for (Map.Entry<String, Object> entry : report.getSummary().entrySet()) {
                body.append("<li><strong>").append(formatKey(entry.getKey())).append(":</strong> ")
                        .append(entry.getValue()).append("</li>");
            }
            body.append("</ul>");
        }

        body.append("<p>Please find the detailed report attached to this email.</p>");
        body.append("<hr>");
        body.append("<p><small>This is an automated report from the Satori Learning Platform.</small></p>");
        body.append("</body></html>");

        return body.toString();
    }

    private String createDeliveryNotificationBody(String reportName, List<String> recipients,
            boolean success, String errorMessage) {
        StringBuilder body = new StringBuilder();

        body.append("<html><body>");
        body.append("<h2>Report Delivery Notification</h2>");
        body.append("<p><strong>Report:</strong> ").append(reportName).append("</p>");
        body.append("<p><strong>Status:</strong> ").append(success ? "Success" : "Failed").append("</p>");
        body.append("<p><strong>Recipients:</strong> ").append(recipients.size()).append("</p>");

        if (!success && errorMessage != null) {
            body.append("<p><strong>Error:</strong> ").append(errorMessage).append("</p>");
        }

        body.append("<h3>Recipients</h3>");
        body.append("<ul>");
        for (String recipient : recipients) {
            body.append("<li>").append(recipient).append("</li>");
        }
        body.append("</ul>");

        body.append("<p><small>Generated at: ")
                .append(java.time.LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")))
                .append("</small></p>");
        body.append("</body></html>");

        return body.toString();
    }

    private String generateFilename(ReportDataDTO report, ReportConfigurationDTO.ReportFormat format) {
        String sanitizedTitle = report.getTitle().replaceAll("[^a-zA-Z0-9\\-_]", "_");
        String timestamp = report.getGeneratedAt().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmm"));
        String extension = getFileExtension(format);

        return String.format("%s_%s.%s", sanitizedTitle, timestamp, extension);
    }

    private String getFileExtension(ReportConfigurationDTO.ReportFormat format) {
        switch (format) {
            case PDF:
                return "pdf";
            case EXCEL:
                return "xlsx";
            case CSV:
                return "csv";
            default:
                return "txt";
        }
    }

    private String getContentType(ReportConfigurationDTO.ReportFormat format) {
        switch (format) {
            case PDF:
                return "application/pdf";
            case EXCEL:
                return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            case CSV:
                return "text/csv";
            default:
                return "text/plain";
        }
    }

    private String formatKey(String key) {
        // Convert camelCase to Title Case
        return key.replaceAll("([A-Z])", " $1")
                .replaceAll("^.", String.valueOf(Character.toUpperCase(key.charAt(0))));
    }
}