import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
  RefreshControl,
} from 'react-native';
import { connect } from 'react-redux';
import { useFocusEffect } from '@react-navigation/native';
import { ArrowLeft, ArrowRight, RotateCcw } from 'lucide-react-native';
import { LinearGradient } from 'expo-linear-gradient';
import styles from './flashcard-list-screen.styles';

// Mock flashcard data - should come from API
const mockFlashcardData = {
  vocabulary: [
    { japanese: '„Åì„Çì„Å´„Å°„ÅØ', meaning: 'Xin ch√†o', furigana: '„Åì„Çì„Å´„Å°„ÅØ' },
    { japanese: '„ÅÇ„Çä„Åå„Å®„ÅÜ', meaning: 'C·∫£m ∆°n', furigana: '„ÅÇ„Çä„Åå„Å®„ÅÜ' },
    { japanese: '„Åï„Çà„ÅÜ„Å™„Çâ', meaning: 'T·∫°m bi·ªát', furigana: '„Åï„Çà„ÅÜ„Å™„Çâ' },
    { japanese: '„Åä„ÅØ„Çà„ÅÜ', meaning: 'Ch√†o bu·ªïi s√°ng', furigana: '„Åä„ÅØ„Çà„ÅÜ' },
    { japanese: '„Åô„Åø„Åæ„Åõ„Çì', meaning: 'Xin l·ªói', furigana: '„Åô„Åø„Åæ„Åõ„Çì' },
  ],
};

function FlashcardListScreen(props) {
  const { navigation, route } = props;
  const { lessonId, practiceType, lessonTitle } = route.params || {};

  console.debug('FlashcardListScreen loaded with params:', { lessonId, practiceType, lessonTitle });

  const [loading, setLoading] = useState(false);
  const [refreshing, setRefreshing] = useState(false);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [flashcards, setFlashcards] = useState(mockFlashcardData.vocabulary);

  useFocusEffect(
    React.useCallback(() => {
      loadFlashcards();
    }, [lessonId])
  );

  const loadFlashcards = async () => {
    try {
      setLoading(true);
      // Simulate API call
      setTimeout(() => {
        setFlashcards(mockFlashcardData.vocabulary);
        setLoading(false);
      }, 500);
    } catch (error) {
      console.error('Error loading flashcards:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i flashcards. S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u.');
      setFlashcards(mockFlashcardData.vocabulary);
      setLoading(false);
    }
  };

  const onRefresh = async () => {
    setRefreshing(true);
    await loadFlashcards();
    setRefreshing(false);
  };

  const handlePracticeMode = (mode) => {
    switch (mode) {
      case 'flashcard':
        navigation.navigate('Flashcard', {
          flashcards,
          lessonTitle,
          mode: 'flashcard',
        });
        break;
      case 'quiz':
        navigation.navigate('Quiz', {
          lessonId,
          lessonTitle,
          practiceType: 'Tr·∫Øc nghi·ªám',
          flashcards,
        });
        break;
      case 'test':
        Alert.alert('ƒêang ph√°t tri·ªÉn', 'Ch·∫ø ƒë·ªô Test s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t s·ªõm!');
        break;
    }
  };

  const goToPrevious = () => {
    if (currentIndex > 0) {
      setCurrentIndex(currentIndex - 1);
    }
  };

  const goToNext = () => {
    if (currentIndex < flashcards.length - 1) {
      setCurrentIndex(currentIndex + 1);
    }
  };

  if (loading && !refreshing) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#3B82F6" />
        <Text style={styles.loadingText}>ƒêang t·∫£i flashcards...</Text>
      </View>
    );
  }

  if (!flashcards || flashcards.length === 0) {
    return (
      <View style={styles.container}>
        {/* Header */}
        <LinearGradient colors={['#1E3A8A', '#3B82F6']} style={styles.header}>
          <View style={styles.headerContent}>
            <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
              <ArrowLeft size={24} color="#ffffff" />
            </TouchableOpacity>
            <View style={styles.titleContainer}>
              <Text style={styles.headerTitle}>{lessonTitle || 'T·ª´ v·ª±ng'}</Text>
              <Text style={styles.headerSubtitle}>Flashcards</Text>
            </View>
          </View>
        </LinearGradient>

        <View style={styles.emptyContainer}>
          <Text style={styles.emptyTitle}>Ch∆∞a c√≥ flashcards</Text>
          <Text style={styles.emptyDescription}>
            Kh√¥ng c√≥ t·ª´ v·ª±ng n√†o ƒë∆∞·ª£c t√¨m th·∫•y cho b√†i h·ªçc n√†y
          </Text>
          <TouchableOpacity style={styles.retryButton} onPress={loadFlashcards}>
            <RotateCcw size={16} color="#3B82F6" />
            <Text style={styles.retryText}>Th·ª≠ l·∫°i</Text>
          </TouchableOpacity>
        </View>
      </View>
    );
  }

  const currentCard = flashcards[currentIndex];

  return (
    <View style={styles.container}>
      <ScrollView
        style={styles.scrollView}
        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}
      >
        {/* Header */}
        <LinearGradient colors={['#1E3A8A', '#3B82F6']} style={styles.header}>
          <View style={styles.headerContent}>
            <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
              <ArrowLeft size={24} color="#ffffff" />
            </TouchableOpacity>
            <View style={styles.titleContainer}>
              <Text style={styles.headerTitle}>{lessonTitle || 'T·ª´ v·ª±ng'}</Text>
              <Text style={styles.headerSubtitle}>{flashcards.length} flashcards</Text>
            </View>
          </View>
        </LinearGradient>

        {/* Flashcard Preview */}
        <View style={styles.previewContainer}>
          <Text style={styles.previewTitle}>Xem tr∆∞·ªõc</Text>

          <View style={styles.flashcardPreview}>
            <Text style={styles.previewJapanese}>{currentCard.japanese}</Text>
            <Text style={styles.previewFurigana}>{currentCard.furigana}</Text>
            <View style={styles.divider} />
            <Text style={styles.previewMeaning}>{currentCard.meaning}</Text>
          </View>

          {/* Progress */}
          <View style={styles.progressContainer}>
            <View style={styles.progressDots}>
              {flashcards.map((_, index) => (
                <View
                  key={index}
                  style={[styles.progressDot, index === currentIndex && styles.progressDotActive]}
                />
              ))}
            </View>
            <Text style={styles.progressText}>
              {currentIndex + 1}/{flashcards.length}
            </Text>
          </View>

          {/* Navigation */}
          <View style={styles.navigationContainer}>
            <TouchableOpacity
              style={[styles.navButton, currentIndex === 0 && styles.navButtonDisabled]}
              onPress={goToPrevious}
              disabled={currentIndex === 0}
            >
              <ArrowLeft size={20} color={currentIndex === 0 ? '#9CA3AF' : '#3B82F6'} />
            </TouchableOpacity>

            <TouchableOpacity
              style={[
                styles.navButton,
                currentIndex === flashcards.length - 1 && styles.navButtonDisabled,
              ]}
              onPress={goToNext}
              disabled={currentIndex === flashcards.length - 1}
            >
              <ArrowRight
                size={20}
                color={currentIndex === flashcards.length - 1 ? '#9CA3AF' : '#3B82F6'}
              />
            </TouchableOpacity>
          </View>
        </View>

        {/* Practice Modes */}
        <View style={styles.practiceModesContainer}>
          <Text style={styles.practiceTitle}>Ch·ªçn ch·∫ø ƒë·ªô luy·ªán t·∫≠p</Text>

          <TouchableOpacity
            style={styles.practiceModeCard}
            onPress={() => handlePracticeMode('flashcard')}
          >
            <View style={styles.modeIcon}>
              <Text style={styles.modeIconText}>üß†</Text>
            </View>
            <View style={styles.modeContent}>
              <Text style={styles.modeTitle}>Th·∫ª ghi nh·ªõ</Text>
              <Text style={styles.modeDescription}>H·ªçc t·ª´ v·ª±ng v·ªõi th·∫ª flashcard t∆∞∆°ng t√°c</Text>
            </View>
            <ArrowRight size={20} color="#9CA3AF" />
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.practiceModeCard}
            onPress={() => handlePracticeMode('quiz')}
          >
            <View style={styles.modeIcon}>
              <Text style={styles.modeIconText}>‚ùì</Text>
            </View>
            <View style={styles.modeContent}>
              <Text style={styles.modeTitle}>Quiz</Text>
              <Text style={styles.modeDescription}>Tr·∫£ l·ªùi c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªÅ t·ª´ v·ª±ng</Text>
            </View>
            <ArrowRight size={20} color="#9CA3AF" />
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.practiceModeCard}
            onPress={() => handlePracticeMode('test')}
          >
            <View style={styles.modeIcon}>
              <Text style={styles.modeIconText}>üìù</Text>
            </View>
            <View style={styles.modeContent}>
              <Text style={styles.modeTitle}>Ki·ªÉm tra</Text>
              <Text style={styles.modeDescription}>
                Ki·ªÉm tra kh·∫£ nƒÉng ghi nh·ªõ t·ª´ v·ª±ng to√†n di·ªán
              </Text>
            </View>
            <ArrowRight size={20} color="#9CA3AF" />
          </TouchableOpacity>
        </View>
      </ScrollView>
    </View>
  );
}

const mapStateToProps = (state) => {
  return {};
};

const mapDispatchToProps = (dispatch) => {
  return {};
};

export default connect(mapStateToProps, mapDispatchToProps)(FlashcardListScreen);
