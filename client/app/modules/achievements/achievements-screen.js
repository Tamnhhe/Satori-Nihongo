import React, { useState } from 'react';
import { View, Text, ScrollView, TouchableOpacity } from 'react-native';
import { connect } from 'react-redux';
import { useNavigation } from '@react-navigation/native';
import { ArrowLeft, Trophy, Star } from 'lucide-react-native';
import { LinearGradient } from 'expo-linear-gradient';
import styles from './achievements-screen.styles';

const achievements = [
  {
    id: 1,
    title: 'Hiragana Master',
    description: 'Ho√†n th√†nh b·∫£ng ch·ªØ c√°i Hiragana',
    timeAgo: '2 ng√†y tr∆∞·ªõc',
    icon: 'üìù',
    bgColor: '#F59E0B',
    isUnlocked: true,
  },
  {
    id: 2,
    title: 'T·ª´ v·ª±ng c∆° b·∫£n',
    description: '100 t·ª´ v·ª±ng ƒë·∫ßu ti√™n',
    timeAgo: '1 tu·∫ßn tr∆∞·ªõc',
    icon: 'üìö',
    bgColor: '#3B82F6',
    isUnlocked: true,
  },
  {
    id: 3,
    title: 'Ki√™n tr√¨',
    description: 'H·ªçc 7 ng√†y li√™n ti·∫øp',
    timeAgo: '2 ng√†y tr∆∞·ªõc',
    icon: 'üìÖ',
    bgColor: '#10B981',
    isUnlocked: true,
  },
  {
    id: 4,
    title: 'Katakana Master',
    description: 'Ho√†n th√†nh b·∫£ng ch·ªØ c√°i Katakana',
    timeAgo: 'Ch∆∞a m·ªü kh√≥a',
    icon: 'üîí',
    bgColor: '#9CA3AF',
    isUnlocked: false,
  },
  {
    id: 5,
    title: 'Ng∆∞·ªùi b·∫°n m·ªõi',
    description: 'Tham gia 10 bu·ªïi h·ªçc',
    timeAgo: '3 ng√†y tr∆∞·ªõc',
    icon: '‚≠ê',
    bgColor: '#8B5CF6',
    isUnlocked: true,
  },
  {
    id: 6,
    title: 'Si√™u chƒÉm',
    description: 'H·ªçc 20 ng√†y li√™n ti·∫øp',
    timeAgo: 'Ch∆∞a m·ªü kh√≥a',
    icon: 'üîí',
    bgColor: '#9CA3AF',
    isUnlocked: false,
  },
];

function AchievementsScreen(_props) {
  const navigation = useNavigation();
  const [activeTab, setActiveTab] = useState('T·∫•t c·∫£');

  const tabs = ['T·∫•t c·∫£', 'M·ªõi ƒë·∫°t ƒë∆∞·ª£c', 'Ch∆∞a m·ªü kh√≥a'];

  const filteredAchievements = achievements.filter((achievement) => {
    if (activeTab === 'M·ªõi ƒë·∫°t ƒë∆∞·ª£c') {
      return (
        achievement.isUnlocked &&
        achievement.timeAgo.includes('ng√†y tr∆∞·ªõc') &&
        !achievement.timeAgo.includes('tu·∫ßn')
      );
    }
    if (activeTab === 'Ch∆∞a m·ªü kh√≥a') {
      return !achievement.isUnlocked;
    }
    return true;
  });

  const handleBack = () => {
    navigation.goBack();
  };

  const handleContinueLearning = () => {
    // Navigate to home or lessons
    navigation.navigate('Home');
  };

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <View style={styles.headerContent}>
          <TouchableOpacity style={styles.backButton} onPress={handleBack} activeOpacity={0.7}>
            <ArrowLeft size={24} color="#374151" />
          </TouchableOpacity>

          <View style={styles.headerTitle}>
            <Trophy size={20} color="#F59E0B" />
            <Text style={styles.headerTitleText}>Th√†nh t·ª±u c·ªßa b·∫°n</Text>
          </View>

          <View style={styles.headerAvatar}>
            <LinearGradient colors={['#F59E0B', '#F97316']} style={styles.avatarGradient}>
              <Text style={styles.avatarEmoji}>üë®‚Äçüíº</Text>
            </LinearGradient>
          </View>
        </View>
      </View>

      <ScrollView showsVerticalScrollIndicator={false} contentContainerStyle={styles.scrollContent}>
        <View style={styles.content}>
          {/* Progress Stats */}
          <View style={styles.statsSection}>
            <Text style={styles.sectionTitle}>Ti·∫øn ƒë·ªô h·ªçc t·∫≠p</Text>

            <View style={styles.statsContainer}>
              <View style={styles.statItem}>
                <Text style={styles.statValue}>47</Text>
                <Text style={styles.statLabel}>Gi·ªù h·ªçc</Text>
              </View>
              <View style={styles.statItem}>
                <Text style={styles.statValueOrange}>23</Text>
                <Text style={styles.statLabel}>Th√†nh t·ª±u</Text>
              </View>
            </View>

            {/* JLPT Progress */}
            <View style={styles.progressSection}>
              <View style={styles.progressHeader}>
                <Text style={styles.progressLabel}>JLPT N5 ‚Üí N4</Text>
                <Text style={styles.progressPercent}>68%</Text>
              </View>
              <View style={styles.progressBarBackground}>
                <View style={[styles.progressBar, { width: '68%' }]} />
              </View>
              <Text style={styles.progressSubtext}>C√≤n 245 t·ª´ v·ª±ng ƒë·ªÉ ƒë·∫°t N4</Text>
            </View>
          </View>

          {/* Encouragement Card */}
          <LinearGradient colors={['#F59E0B', '#F97316']} style={styles.encouragementCard}>
            <View style={styles.encouragementContent}>
              <View style={styles.encouragementLeft}>
                <View style={styles.encouragementHeader}>
                  <Star size={16} color="#ffffff" />
                  <Text style={styles.encouragementSubtext}>B·∫°n ƒëang ti·∫øn g·∫ßn ƒë·∫øn m·ª©c</Text>
                </View>
                <Text style={styles.encouragementTitle}>N4</Text>
                <Text style={styles.encouragementDescription}>Ch·ªâ c√≤n 32% n·ªØa th√¥i</Text>
              </View>
              <View style={styles.encouragementIcon}>
                <Text style={styles.targetEmoji}>üéØ</Text>
              </View>
            </View>
          </LinearGradient>

          {/* Tabs */}
          <View style={styles.tabsContainer}>
            {tabs.map((tab) => (
              <TouchableOpacity
                key={tab}
                style={[styles.tab, activeTab === tab ? styles.activeTab : styles.inactiveTab]}
                onPress={() => setActiveTab(tab)}
                activeOpacity={0.7}
              >
                <Text
                  style={[
                    styles.tabText,
                    activeTab === tab ? styles.activeTabText : styles.inactiveTabText,
                  ]}
                >
                  {tab}
                </Text>
              </TouchableOpacity>
            ))}
          </View>

          {/* Achievements Grid */}
          <View style={styles.achievementsSection}>
            <Text style={styles.achievementsTitle}>Huy hi·ªáu th√†nh t·ª±u</Text>

            <View style={styles.achievementsGrid}>
              {filteredAchievements.map((achievement) => (
                <View
                  key={achievement.id}
                  style={[styles.achievementCard, !achievement.isUnlocked && styles.lockedCard]}
                >
                  <View style={[styles.achievementIcon, { backgroundColor: achievement.bgColor }]}>
                    <Text style={styles.achievementEmoji}>
                      {achievement.isUnlocked ? achievement.icon : 'üîí'}
                    </Text>
                  </View>

                  <Text style={styles.achievementTitle}>{achievement.title}</Text>

                  <Text style={styles.achievementDescription}>{achievement.description}</Text>

                  <Text
                    style={[
                      styles.achievementTime,
                      achievement.isUnlocked ? styles.unlockedTime : styles.lockedTime,
                    ]}
                  >
                    {achievement.timeAgo}
                  </Text>
                </View>
              ))}
            </View>
          </View>

          {/* Continue Learning Button */}
          <TouchableOpacity
            style={styles.continueButton}
            onPress={handleContinueLearning}
            activeOpacity={0.8}
          >
            <Text style={styles.playIcon}>‚ñ∂</Text>
            <Text style={styles.continueButtonText}>Ti·∫øp t·ª•c h·ªçc</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </View>
  );
}

const mapStateToProps = (_state) => ({
  // Add any state you need here
});

const mapDispatchToProps = (_dispatch) => ({
  // Add any actions you need here
});

export default connect(mapStateToProps, mapDispatchToProps)(AchievementsScreen);
